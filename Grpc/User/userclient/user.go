// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userclient

import (
	"context"

	"User/user"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	UsersInfoReply = user.UsersInfoReply
	RegisterReq    = user.RegisterReq
	LoginReq       = user.LoginReq
	UpdateUserReq  = user.UpdateUserReq
	Request        = user.Request
	Reply          = user.Reply
	IdReq          = user.IdReq
	UserInfoReply  = user.UserInfoReply

	User interface {
		FindOneUserById(ctx context.Context, in *IdReq) (*UserInfoReply, error)
		FindAllUser(ctx context.Context, in *Request) (*UsersInfoReply, error)
		Register(ctx context.Context, in *RegisterReq) (*Reply, error)
		Login(ctx context.Context, in *LoginReq) (*Reply, error)
		UpdateUser(ctx context.Context, in *UpdateUserReq) (*Reply, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) FindOneUserById(ctx context.Context, in *IdReq) (*UserInfoReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.FindOneUserById(ctx, in)
}

func (m *defaultUser) FindAllUser(ctx context.Context, in *Request) (*UsersInfoReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.FindAllUser(ctx, in)
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterReq) (*Reply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq) (*Reply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in)
}

func (m *defaultUser) UpdateUser(ctx context.Context, in *UpdateUserReq) (*Reply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UpdateUser(ctx, in)
}
