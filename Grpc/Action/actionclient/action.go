// Code generated by goctl. DO NOT EDIT!
// Source: action.proto

package actionclient

import (
	"context"

	"Action/action"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommentReq            = action.CommentReq
	CommentResp           = action.CommentResp
	CommentsNodeResp      = action.CommentsNodeResp
	CommentsTreeResp      = action.CommentsTreeResp
	Request               = action.Request
	Response              = action.Response
	TrafficStatisticReq   = action.TrafficStatisticReq
	TrafficStatisticResp  = action.TrafficStatisticResp
	TrafficStatisticsResp = action.TrafficStatisticsResp

	Action interface {
		// TrafficStatistic
		GetAllTrafficStatistics(ctx context.Context, in *Request, opts ...grpc.CallOption) (*TrafficStatisticsResp, error)
		GetTrafficStatisticByBookIdAndChapterNum(ctx context.Context, in *TrafficStatisticReq, opts ...grpc.CallOption) (*TrafficStatisticResp, error)
		CreateTrafficStatistic(ctx context.Context, in *TrafficStatisticReq, opts ...grpc.CallOption) (*Response, error)
		UpdateTrafficStatistic(ctx context.Context, in *TrafficStatisticReq, opts ...grpc.CallOption) (*Response, error)
		// Comments
		GetCommentsByBookContentId(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*CommentsTreeResp, error)
		CreateComment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Response, error)
		UpdateComment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Response, error)
		DeleteComment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Response, error)
	}

	defaultAction struct {
		cli zrpc.Client
	}
)

func NewAction(cli zrpc.Client) Action {
	return &defaultAction{
		cli: cli,
	}
}

// TrafficStatistic
func (m *defaultAction) GetAllTrafficStatistics(ctx context.Context, in *Request, opts ...grpc.CallOption) (*TrafficStatisticsResp, error) {
	client := action.NewActionClient(m.cli.Conn())
	return client.GetAllTrafficStatistics(ctx, in, opts...)
}

func (m *defaultAction) GetTrafficStatisticByBookIdAndChapterNum(ctx context.Context, in *TrafficStatisticReq, opts ...grpc.CallOption) (*TrafficStatisticResp, error) {
	client := action.NewActionClient(m.cli.Conn())
	return client.GetTrafficStatisticByBookIdAndChapterNum(ctx, in, opts...)
}

func (m *defaultAction) CreateTrafficStatistic(ctx context.Context, in *TrafficStatisticReq, opts ...grpc.CallOption) (*Response, error) {
	client := action.NewActionClient(m.cli.Conn())
	return client.CreateTrafficStatistic(ctx, in, opts...)
}

func (m *defaultAction) UpdateTrafficStatistic(ctx context.Context, in *TrafficStatisticReq, opts ...grpc.CallOption) (*Response, error) {
	client := action.NewActionClient(m.cli.Conn())
	return client.UpdateTrafficStatistic(ctx, in, opts...)
}

// Comments
func (m *defaultAction) GetCommentsByBookContentId(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*CommentsTreeResp, error) {
	client := action.NewActionClient(m.cli.Conn())
	return client.GetCommentsByBookContentId(ctx, in, opts...)
}

func (m *defaultAction) CreateComment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Response, error) {
	client := action.NewActionClient(m.cli.Conn())
	return client.CreateComment(ctx, in, opts...)
}

func (m *defaultAction) UpdateComment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Response, error) {
	client := action.NewActionClient(m.cli.Conn())
	return client.UpdateComment(ctx, in, opts...)
}

func (m *defaultAction) DeleteComment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Response, error) {
	client := action.NewActionClient(m.cli.Conn())
	return client.DeleteComment(ctx, in, opts...)
}
