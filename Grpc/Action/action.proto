syntax = "proto3";

package action;

option go_package = "action";

message Request {
  string ping = 1;
}

message Response {
  bool ok = 1;
  string message = 2;
}

message TrafficStatisticReq{
  int64 id = 1;
  int64 BookId = 2;
  int64 ChapterNum = 3;
  int64 TrafficNumber = 4;
}

message TrafficStatisticResp{
  int64 id = 1;
  int64 BookId = 2;
  int64 ChapterNum = 3;
  int64 TrafficNumber = 4;
}

message TrafficStatisticsResp{
  repeated TrafficStatisticResp TrafficStatistics = 1;
}

message CommentReq{
  int64 Id = 1;
  int64 ParentId = 2;
  int64 BookContentId = 3;
  string Comment = 4;
  int64 CommentByUserId = 5;
  string CommentByNickname = 6;
  int64 CommentToUserId = 7;
  string CommentToNickname = 8;
}

message CommentResp{
  int64 Id = 1;
  int64 ParentId = 2;
  int64 BookContentId = 3;
  string Comment = 4;
  int64 CommentByUserId = 5;
  string CommentByNickname = 6;
  int64 CommentToUserId = 7;
  string CommentToNickname = 8;
}

message CommentsNodeResp{
  CommentResp Comments = 1;
  repeated CommentsNodeResp CommentsNode = 2;
}

message CommentsTreeResp{
  repeated CommentsNodeResp CommentsTree = 1;
}

service Action {
  //TrafficStatistic
  rpc GetAllTrafficStatistics(Request) returns(TrafficStatisticsResp);
  rpc GetTrafficStatisticByBookIdAndChapterNum(TrafficStatisticReq) returns(TrafficStatisticResp);
  rpc CreateTrafficStatistic(TrafficStatisticReq) returns(Response);
  rpc UpdateTrafficStatistic(TrafficStatisticReq) returns(Response);

  //Comments
  rpc GetCommentsByBookContentId(CommentReq) returns(CommentsTreeResp);
  rpc CreateComment(CommentReq) returns(Response);
  rpc UpdateComment(CommentReq) returns(Response);
  rpc DeleteComment(CommentReq) returns(Response);
}
