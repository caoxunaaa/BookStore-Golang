// Code generated by goctl. DO NOT EDIT!
// Source: book.proto

package bookclient

import (
	"context"

	"Book/book"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BookBasicInfoReply  = book.BookBasicInfoReply
	BookBasicInfoReq    = book.BookBasicInfoReq
	BooksBasicInfoReply = book.BooksBasicInfoReply
	Reply               = book.Reply
	Request             = book.Request
	UsernameReq         = book.UsernameReq

	Book interface {
		FindAllBooksSortedByMonth(ctx context.Context, in *Request, opts ...grpc.CallOption) (*BooksBasicInfoReply, error)
		FindAllBooks(ctx context.Context, in *Request, opts ...grpc.CallOption) (*BooksBasicInfoReply, error)
		FindBooksByLikeName(ctx context.Context, in *BookBasicInfoReq, opts ...grpc.CallOption) (*BooksBasicInfoReply, error)
		FindOneBookById(ctx context.Context, in *BookBasicInfoReq, opts ...grpc.CallOption) (*BookBasicInfoReply, error)
		CreateBook(ctx context.Context, in *BookBasicInfoReq, opts ...grpc.CallOption) (*Reply, error)
		DeleteBook(ctx context.Context, in *BookBasicInfoReq, opts ...grpc.CallOption) (*Reply, error)
		UpdateUser(ctx context.Context, in *BookBasicInfoReq, opts ...grpc.CallOption) (*Reply, error)
	}

	defaultBook struct {
		cli zrpc.Client
	}
)

func NewBook(cli zrpc.Client) Book {
	return &defaultBook{
		cli: cli,
	}
}

func (m *defaultBook) FindAllBooksSortedByMonth(ctx context.Context, in *Request, opts ...grpc.CallOption) (*BooksBasicInfoReply, error) {
	client := book.NewBookClient(m.cli.Conn())
	return client.FindAllBooksSortedByMonth(ctx, in, opts...)
}

func (m *defaultBook) FindAllBooks(ctx context.Context, in *Request, opts ...grpc.CallOption) (*BooksBasicInfoReply, error) {
	client := book.NewBookClient(m.cli.Conn())
	return client.FindAllBooks(ctx, in, opts...)
}

func (m *defaultBook) FindBooksByLikeName(ctx context.Context, in *BookBasicInfoReq, opts ...grpc.CallOption) (*BooksBasicInfoReply, error) {
	client := book.NewBookClient(m.cli.Conn())
	return client.FindBooksByLikeName(ctx, in, opts...)
}

func (m *defaultBook) FindOneBookById(ctx context.Context, in *BookBasicInfoReq, opts ...grpc.CallOption) (*BookBasicInfoReply, error) {
	client := book.NewBookClient(m.cli.Conn())
	return client.FindOneBookById(ctx, in, opts...)
}

func (m *defaultBook) CreateBook(ctx context.Context, in *BookBasicInfoReq, opts ...grpc.CallOption) (*Reply, error) {
	client := book.NewBookClient(m.cli.Conn())
	return client.CreateBook(ctx, in, opts...)
}

func (m *defaultBook) DeleteBook(ctx context.Context, in *BookBasicInfoReq, opts ...grpc.CallOption) (*Reply, error) {
	client := book.NewBookClient(m.cli.Conn())
	return client.DeleteBook(ctx, in, opts...)
}

func (m *defaultBook) UpdateUser(ctx context.Context, in *BookBasicInfoReq, opts ...grpc.CallOption) (*Reply, error) {
	client := book.NewBookClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}
