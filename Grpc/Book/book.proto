syntax = "proto3";

package book;

option go_package = "book";

message Request{
  int64 ping = 1;
  int64 year = 2;
  int64 month = 3;
}

message Reply{
  bool ok = 1;
  string message = 2;
}

message UsernameReq{
  string username = 1;
}

message BookBasicInfoReply{
  int64 id = 1;
  string name = 2;
  string author = 3;
  string image = 4;
  string storage_time = 5;
}

message BooksBasicInfoReply{
  repeated BookBasicInfoReply booksBasicInfo = 1;
}

message BookBasicInfoReq{
  int64 id = 1;
  string name = 2;
  string author = 3;
  string image = 4;
  string storage_time = 5;
}

message BookContentReq{
  int64 id = 1;
  int64 book_id = 2;
  int64 chapter_num = 3;
  string chapter_name = 4;
  string chapter_content = 5;
  string create_time = 6;
}

message BookContentReply{
  int64 id = 1;
  int64 book_id = 2;
  int64 chapter_num = 3;
  string chapter_name = 4;
  string chapter_content = 5;
  string create_time = 6;
}
message BookContentsReply{
  repeated BookContentReply book_contents_reply = 1;
}


service Book {
//  book_basic_info
  rpc FindAllBooksSortedByMonth(Request) returns(BooksBasicInfoReply);
  rpc FindAllBooks(Request) returns(BooksBasicInfoReply);
  rpc FindBooksByLikeName(BookBasicInfoReq) returns(BooksBasicInfoReply);

  rpc FindOneBookById(BookBasicInfoReq) returns(BookBasicInfoReply);

  rpc CreateBook(BookBasicInfoReq) returns(Reply);
  rpc DeleteBook(BookBasicInfoReq) returns(Reply);
  rpc UpdateUser(BookBasicInfoReq) returns(Reply);
//  book_content
  rpc FindAllBookContentsByBookId(BookContentReq) returns(BookContentsReply);

  rpc FindOneBookContentByBookIdAndChapterNum(BookContentReq) returns(BookContentReply);

  rpc CreateBookContent(BookContentReq) returns(Reply);
  rpc DeleteBookContent(BookContentReq) returns(Reply);
  rpc UpdateBookContent(BookContentReq) returns(Reply);
}