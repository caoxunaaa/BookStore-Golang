// Code generated by goctl. DO NOT EDIT!
// Source: book.proto

package server

import (
	"context"

	"Book/book"
	"Book/internal/logic"
	"Book/internal/svc"
)

type BookServer struct {
	svcCtx *svc.ServiceContext
}

func NewBookServer(svcCtx *svc.ServiceContext) *BookServer {
	return &BookServer{
		svcCtx: svcCtx,
	}
}

//   book_basic_info
func (s *BookServer) FindAllBooksSortedByMonth(ctx context.Context, in *book.Request) (*book.BooksBasicInfoReply, error) {
	l := logic.NewFindAllBooksSortedByMonthLogic(ctx, s.svcCtx)
	return l.FindAllBooksSortedByMonth(in)
}

func (s *BookServer) FindAllBooks(ctx context.Context, in *book.Request) (*book.BooksBasicInfoReply, error) {
	l := logic.NewFindAllBooksLogic(ctx, s.svcCtx)
	return l.FindAllBooks(in)
}

func (s *BookServer) FindBooksByLikeName(ctx context.Context, in *book.BookBasicInfoReq) (*book.BooksBasicInfoReply, error) {
	l := logic.NewFindBooksByLikeNameLogic(ctx, s.svcCtx)
	return l.FindBooksByLikeName(in)
}

func (s *BookServer) FindBooksByStorageUserId(ctx context.Context, in *book.BookBasicInfoReq) (*book.BooksBasicInfoReply, error) {
	l := logic.NewFindBooksByStorageUserIdLogic(ctx, s.svcCtx)
	return l.FindBooksByStorageUserId(in)
}

func (s *BookServer) FindOneBookById(ctx context.Context, in *book.BookBasicInfoReq) (*book.BookBasicInfoReply, error) {
	l := logic.NewFindOneBookByIdLogic(ctx, s.svcCtx)
	return l.FindOneBookById(in)
}

func (s *BookServer) CreateBook(ctx context.Context, in *book.BookBasicInfoReq) (*book.Reply, error) {
	l := logic.NewCreateBookLogic(ctx, s.svcCtx)
	return l.CreateBook(in)
}

func (s *BookServer) DeleteBook(ctx context.Context, in *book.BookBasicInfoReq) (*book.Reply, error) {
	l := logic.NewDeleteBookLogic(ctx, s.svcCtx)
	return l.DeleteBook(in)
}

func (s *BookServer) UpdateBook(ctx context.Context, in *book.BookBasicInfoReq) (*book.Reply, error) {
	l := logic.NewUpdateBookLogic(ctx, s.svcCtx)
	return l.UpdateBook(in)
}

//   book_content
func (s *BookServer) FindAllBookContentsByBookId(ctx context.Context, in *book.BookContentReq) (*book.BookContentsReply, error) {
	l := logic.NewFindAllBookContentsByBookIdLogic(ctx, s.svcCtx)
	return l.FindAllBookContentsByBookId(in)
}

func (s *BookServer) FindOneBookContentByBookIdAndChapterNum(ctx context.Context, in *book.BookContentReq) (*book.BookContentReply, error) {
	l := logic.NewFindOneBookContentByBookIdAndChapterNumLogic(ctx, s.svcCtx)
	return l.FindOneBookContentByBookIdAndChapterNum(in)
}

func (s *BookServer) CreateBookContent(ctx context.Context, in *book.BookContentReq) (*book.Reply, error) {
	l := logic.NewCreateBookContentLogic(ctx, s.svcCtx)
	return l.CreateBookContent(in)
}

func (s *BookServer) DeleteBookContent(ctx context.Context, in *book.BookContentReq) (*book.Reply, error) {
	l := logic.NewDeleteBookContentLogic(ctx, s.svcCtx)
	return l.DeleteBookContent(in)
}

func (s *BookServer) UpdateBookContent(ctx context.Context, in *book.BookContentReq) (*book.Reply, error) {
	l := logic.NewUpdateBookContentLogic(ctx, s.svcCtx)
	return l.UpdateBookContent(in)
}

//  book_inventory
func (s *BookServer) FindAllBookInventory(ctx context.Context, in *book.BookInventoryReq) (*book.BooksInventoryResp, error) {
	l := logic.NewFindAllBookInventoryLogic(ctx, s.svcCtx)
	return l.FindAllBookInventory(in)
}

func (s *BookServer) FindBookInventoryByBookId(ctx context.Context, in *book.BookInventoryReq) (*book.BookInventoryResp, error) {
	l := logic.NewFindBookInventoryByBookIdLogic(ctx, s.svcCtx)
	return l.FindBookInventoryByBookId(in)
}

func (s *BookServer) CreateBookInventory(ctx context.Context, in *book.BookInventoryReq) (*book.Reply, error) {
	l := logic.NewCreateBookInventoryLogic(ctx, s.svcCtx)
	return l.CreateBookInventory(in)
}

func (s *BookServer) UpdateBookInventory(ctx context.Context, in *book.BookInventoryReq) (*book.Reply, error) {
	l := logic.NewUpdateBookInventoryLogic(ctx, s.svcCtx)
	return l.UpdateBookInventory(in)
}
